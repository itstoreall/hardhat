{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FallbackExample.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\ncontract FallbackExample {\n  uint256 public result;\n\n  /* The receive function is executed on \n    a call to the contract with empty calldata */\n  receive() external payable {\n    result = 1;\n  }\n\n  /* The fallback function is executed on a \n    call to the contract if none of the other \n    functions match the given function signature, \n    or if no data was supplied at all and there \n    is no receive Ether function */\n  fallback() external payable {\n    result = 2;\n  }\n}\n\n//  Ether is sent to contract\n//        is msg.data empty?\n//               /    \\\n//             yes     no\n//             /        \\\n//      receive()?   fallback()\n//        /     \\\n//      yes      no\n//      /         \\\n//  receive()  fallback()\n"
    },
    "contracts/Funding.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract Funding {\n  using PriceConverter for uint256;\n\n  uint256 public constant MINIMUM_USD = 0.02 * 1e18; // 1 * 10 ** 18\n  // 0.02 / 1625 = 0.000012484592145 (12400000000000 Wei)\n\n  address[] public funders;\n  mapping(address => uint256) public addressToAmountFunded;\n\n  address public immutable i_owner;\n\n  AggregatorV3Interface public priceFeed;\n\n  constructor(address priceFeedAddress) {\n    i_owner = msg.sender;\n    priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  function fund() public payable {\n    require(\n      msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n      \"Didn't sent enough!\"\n    );\n\n    // 1e18 == 1 * 10 ** 18 == 1000000000000000000\n    // 18 decimals\n\n    funders.push(msg.sender);\n    addressToAmountFunded[msg.sender] += msg.value;\n  }\n\n  function withdraw() public onlyOwner {\n    for (uint256 funderIdx = 0; funderIdx < funders.length; funderIdx++) {\n      address funder = funders[funderIdx];\n      addressToAmountFunded[funder] = 0;\n    }\n\n    funders = new address[](0);\n\n    // Call\n    (bool callSuccess, ) = payable(msg.sender).call{\n      value: address(this).balance\n    }(\"\");\n    require(callSuccess, \"Call failed\");\n\n    // Transfer (to each other)\n    // payable(msg.sender).transfer(address(this).balance);\n\n    // Send\n    // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n    // require(sendSuccess, \"Send failed\");\n  }\n\n  modifier onlyOwner() {\n    // require(msg.sender == i_owner, \"Sender in not owner!\"); // not optimized\n    if (msg.sender != i_owner) {\n      revert NotOwner();\n    } // optimized\n    _;\n  }\n\n  receive() external payable {\n    fund();\n  }\n\n  fallback() external payable {\n    fund();\n  }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\n// import \"../node_modules/@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  function getPrice(\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    // ABI\n    // address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n\n    // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n    //   0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n    // );\n\n    (, int price, , , ) = priceFeed.latestRoundData();\n\n    // ETH in terms of USD\n    // 1655.00000000\n\n    return uint256(price * 1e10); // 1**10 == 10000000000\n  }\n\n  /*\n  function getVersion() internal view returns (uint256) {\n    AggregatorV3Interface priceFeed = AggregatorV3Interface(\n      0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n    );\n    return priceFeed.version();\n  }\n  */\n\n  function getConversionRate(\n    uint256 ethAmount,\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    uint256 ethPrice = getPrice(priceFeed);\n\n    // 1655_000000000000000000 = ETH / USD price\n    // 1_000000000000000000 ETH\n\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n    return ethAmountInUsd;\n  }\n}\n"
    },
    "contracts/SafeMathTester.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\ncontract SafeMathTester {\n  uint8 public bigNumber = 255;\n\n  function addOneToBigNumber() public {\n    bigNumber = bigNumber + 1;\n  }\n\n  function addWithUnchecked() public {\n    unchecked {\n      bigNumber = bigNumber + 1;\n    }\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}